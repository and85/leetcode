0. Advantages of Java over C# for leetcoding: Java has TreeMap (C# SortedDictionary is similar, but not quite the same). 
Python also doesn't contain TreeMap

1. if we have an array of positive integers, and want to mark visited elements in place without extra space, 
we could just change a sign for touched elements to negative

2. take your own markers to the interview, different colors

3. Ингда чтобы проверить, что какая-то функция возвращает true или false, и сложно проверить одно условие, например true, можно проверить только условия когда результат false а в
остальных случаях возвращать true. Пример: https://leetcode.com/problems/rectangle-overlap/

4. Чтобы поменять направление вектора, можно увеличивать направление как число и делить на модуль 4, чтобы не было переполнения и всегда получать адекватное направление:
https://leetcode.com/problems/robot-bounded-in-circle/solution/

5. Check number is a perfect square:
private bool IsPerfectSquare(double x)
        {
            double sr = Math.Sqrt(x);

            return ((sr - Math.Floor(sr)) == 0);
        }

6. Array.Sort is not stable sorting. If we want to have a stable sorting, use Lynq OrderBy or create stabilyzing comparer:
https://leetcode.com/problems/reorder-data-in-log-files/discuss/939487/c-two-approaches

7. to avoid integer overflow errors, sometimes we should use target + 1 instead of int.Max
https://leetcode.com/problems/coin-change/submissions/

8. C# List contains indexer which allows O(1) access because of the internal implementation as array. e.g. we can write something
like:
var list = new List<List<int>>();
...
list[1].Add

However Insert(index, element) or list.ElementAt(index) will be O(n), because those methods is common for Enumerable and and a collection represented by enumerable may not have an indexer.

9. Arrays
Binary trees can also be stored in breadth-first order as an implicit data structure in arrays, and if the tree is a complete binary tree, this method wastes no space. In this compact arrangement, if a node has an index i, its children are found at indices {\displaystyle 2i+1}2i+1 (for the left child) and {\displaystyle 2i+2}2i+2 (for the right), while its parent (if any) is found at index {\displaystyle \left\lfloor {\frac {i-1}{2}}\right\rfloor }\left\lfloor {\frac {i-1}{2}}\right\rfloor  (assuming the root has index zero).

10. The best-known rule for traversing mazes is the wall follower, also known as either the left-hand rule or the right-hand rule. 
11. C# List class contains BinarySearch methid which works for sorted lists
12. C# Random.Next(minValue, maxValue), upper bound is exclusive https://leetcode.com/problems/insert-delete-getrandom-o1/solution/
13. We can remove an element from a list in O(1) time, just by swapping the element we want to remove with the last one: https://leetcode.com/problems/insert-delete-getrandom-o1/solution/
14. C# OrderedDictionary is very wierd collection, e.g. it's not generic and it's not really intuitive how to use it properly. But similar functionality could be achieved by using a 
simple combination of Queue/Stack together with Dictionary: https://leetcode.com/problems/first-unique-number/submissions/

15. Dijkstra algorithm doesn't work correctly when there are negative weights of edges (it could give a wrong answer in such a case): https://www.youtube.com/watch?v=XB4MIexjvY0&ab_channel=AbdulBari
16.Bellman-Ford works for graphs with nagitive edges, works for graphs with cycles, but fails for graphs with cycles with negative edges. But it's possible to detect if there is a cycle with negative edge. 
(at the last step, none vertixes have to be relaxed, and if there are, we have faced the cycle)
https://www.youtube.com/watch?v=FtN3BYH2Zes&ab_channel=AbdulBari
usually Belman Ford time complexiy is O(V*E) = O(n^2), but for complete graphs it takes O(n^3)

Dijkstra's algorithm uses a data structure for storing and querying partial solutions sorted by distance from the start. 
While the original algorithm uses a min-priority queue and runs in time O((V+E) * logV), it can also be implemented in O(V^2). 



17. sometimes we don't need to actually add items to stack, but can just count how many of them could be on stack, using a counter. That would give us O(1) space vs O(n) space
https://leetcode.com/problems/remove-outermost-parentheses/discuss/1020240/C-99.2-Fast-O(1)-Memory-and-O(n)-Speed.

18. if we want to calculate modulo of the sum of two number, two avoid type overflow, we could calculate each modulo separately:
(a + b) mod m = (a mod m + b mod m) mod m
(a − b) mod m = (a mod m − b mod m) mod m
(a · b) mod m = (a mod m · b mod m) mod m

19. additionally to two pointers, we can use 3 pointers, etc

20. Number of possible substrings concatanation of which could form a string s, is equal to Sqrt(s.Lenght)
https://leetcode.com/problems/repeated-substring-pattern/solution/
21. sometimes we could use some other data structures as a stack: https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/solution/

22. how to find a greatest common divisor of two numbers:

Euclidean algorithm
static int gcd(int a, int b)
{
	 
	// Everything divides 0 
	if (a == 0)
	  return b;
	if (b == 0)
	  return a;
 
	// base case
	if (a == b)
		return a;
 
	// a is greater
	if (a > b)
		return gcd(a - b, b);
		 
	return gcd(a, b - a);
}

more efficient: modulo operator in Euclidean algorithm . 
public int gcd(int x, int y) {
        return x == 0 ? y : gcd(y%x, x);
    }
https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/solution/

23. for some tasks related to matrixes, sometimes it makes sense to check diagonals (main diagonal and alternative diagonal), then maybe apply binary search, etc
24. sometimes it's possible to iteratively traverse a tree without using a stack or queue in a similar manner as we travers a linked list:
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/solution/
25. With two pointers approach we could set one pointer to the beggining and the second one to the end, then move either left or right pointer depending on different conditions
26. In worst case some sorting algorithms can take O(n^2) time, to solve this problem we may want to randomly shuffle the array before sorting. Good was of shuffling is "Knuth" shuffle
27. Knuth shuffle. Cool way to shuffle a deck of card in O(N) time. https://www.coursera.org/learn/algorithms-part1/lecture/12vcF/shuffling
28. Sometimes it makes sense to use PriorityQueue over Array.Sort
29. The easiest way to create a key which could be used in a hashset, is to create a string with a delimiter
30 C# user 2ns compliment method to store negative numbers in binary format 
https://www.geeksforgeeks.org/representation-of-negative-binary-numbers/
https://www.geeksforgeeks.org/find-ones-complement-integer/
https://www.geeksforgeeks.org/efficient-method-2s-complement-binary-string/